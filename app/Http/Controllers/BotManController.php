<?php

namespace App\Http\Controllers;

use BotMan\BotMan\BotMan;
use BotMan\BotMan\BotManFactory;
use BotMan\BotMan\Drivers\DriverManager;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use App\Models\AdCursos;
use Illuminate\Support\Facades\Log;
use BotMan\BotMan\Messages\Incoming\Answer;
use Illuminate\Support\Facades\Session;
use BotMan\BotMan\Messages\Outgoing\Question;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Outgoing\OutgoingMessage;
use BotMan\BotMan\Messages\Attachments\Image;
use BotMan\BotMan\Messages\Attachments\Video;
use BotMan\BotMan\Messages\Attachments\Audio;
use BotMan\BotMan\Messages\Attachments\File;

class BotManController extends Controller
{
    public function handle()
    {
        $config = [];

        // Carregar o driver web do BotMan
        DriverManager::loadDriver(\BotMan\Drivers\Web\WebDriver::class);

        // Criar uma inst√¢ncia do BotMan
        $botman = BotManFactory::create($config);

        // Definir comandos
        $this->defineCommands($botman);

        // Start listening
        $botman->listen();
    }

    private function defineCommands(BotMan $botman)
{

    
    $botman->hears('meu_curso', function (BotMan $bot) {
        $this->handleMeuCurso($bot);
    });

    $botman->hears('registrar_acc', function (BotMan $bot) {
        $this->RegistarACC($bot);
    });

    $botman->hears('info_acc', function (BotMan $bot) {
        $this->handleInfoACC($bot);
    });

    $botman->hears('pedir_aproveitamento', function (BotMan $bot) {
        $this->PedirAproveitamento($bot);
    });
    
    $botman->hears('sobre_aproveitamento', function (BotMan $bot) {
        $this->InfoAproveitamento($bot);
    });
  //  $botman->hears('aproveitamento_estudos', function (BotMan $bot) {
    //    $this->handleAproveitamento($bot);
  //  });

  $botman->hears('abrir_processo', function (BotMan $bot) {
    // Chame o m√©todo que lida com a abertura do processo acad√™mico
    $this->AbrirProcessoAcademico($bot);
});
    //$botman->hears('matriculas', function (BotMan $bot) {
     //   $this->handleMatricula($bot);
   // });
   $botman->hears('como_matricular', function (BotMan $bot) {
    // Chame o m√©todo que lida com a abertura do processo acad√™mico
    $this->ComoMatricular($bot);
});

$botman->hears('duvidas_matricula', function (BotMan $bot) {
    // Chame o m√©todo que lida com a abertura do processo acad√™mico
    $this->ManualMatricular($bot);
});
    // Manipulador geral para texto livre
    // Este deve ser o √∫ltimo 'hears' antes do fallback para evitar conflitos
    $botman->hears('.*', function (BotMan $bot) {
        $message = $bot->getMessage();
        $this->processUserMessage($bot, $message->getText());
    });

    // Fallback para mensagens n√£o reconhecidas
    $botman->fallback(function (BotMan $bot) {
        $this->handleFallback($bot);
    });
}

    private function processUserMessage(BotMan $bot, $message)
    {
        $intent = $this->detectIntent($message);

        switch ($intent) {
            case 'saudacao':
                $this->greetUser($bot);
                break;
            case 'meu_curso':
                $this->handleMeuCurso($bot);
                break;
            case 'info_acc':
                $this->handleInfoACC($bot);
                break;
            case 'main_menu':
                $this->showMainMenu($bot);
                break;
            case 'acc':
                $this->handleACC($bot);
                break;
            case 'aproveitamento':
                $this->handleAproveitamento($bot);
                break;

            case 'abrir_processo':
                $this->AbrirProcessoAcademico($bot);
                    break;    
            case 'matricula':
                $this->handleMatricula($bot);
                break;

                case 'como_matricular':
                    $this->ComoMatricular($bot);
                    break;

                
            case 'despedida':
                $this->sayGoodbye($bot);
                break;
            default:
                $this->handleFallback($bot);
                break;
        }
    }

    private function detectIntent($message)
    {
        $intent = 'desconhecido';

        // Condi√ß√µes para detectar diferentes inten√ß√µes
        if (preg_match('/^(Oi|Ol√°|Ola|Bom dia|Boa tarde|Boa noite)$/i', $message)) {
            $intent = 'saudacao';
        } elseif (preg_match('/meu curso/i', $message)) {
            $intent = 'meu_curso';
        } elseif (preg_match('/info acc|atividades complementares curriculares|barema/i', $message)) {
            $intent = 'info_acc';
        } elseif (preg_match('/info menu|ajuda|inicioss|menu/i', $message)) {
            $intent = 'main_menu';
        } elseif (preg_match('/acc|atividades complementares curriculares|registrar acc/i', $message)) {
            $intent = 'acc';
        } elseif (preg_match('/aproveitamento|aproveitamento de estudos/i', $message)) {
            $intent = 'aproveitamento';
        } elseif (preg_match('/abrir|abrir processo|abrir processo curso/i', $message)) {
            $intent = 'abrir_processo';
       } elseif (preg_match('/matricula|matricular/i', $message)) {
           $intent = 'matricula';
        } elseif (preg_match('/adeus/i', $message)) {
            $intent = 'despedida';
        }

        return $intent;
    }

    private function handleFallback(BotMan $bot)
    {
        $bot->typesAndWaits(2);
        $bot->reply('Desculpe, n√£o entendi. Poderia escolher uma das op√ß√µes dispon√≠veis no menu?');
        $this->showMainMenu($bot);
    }


    

    private function greetUser(BotMan $bot)
    {
        $user = Auth::user();
        $nomeUsuario = $user ? $user->name : 'como posso ajudarüòä?';
    
        $menu = Question::create("Oi $nomeUsuario, como posso ajudarüòä?")
            ->fallback('N√£o foi poss√≠vel fazer a pergunta')
            ->callbackId('main_menu1')
            ->addButtons([
               // Button::create('üìö Qual √© o meu curso?')->value('meu_curso'),
                Button::create('‚Ñπ Informa√ß√µes sobre o ACC')->value('registrar_acc'),
                Button::create('üîÑ Aproveitamento de Estudos')->value('aproveitamento_estudos'),
                Button::create('üìù Matr√≠culas')->value('como_matricular'),
                Button::create('Abrir processo acad√™mico')->value('abrir_processo'),

            ]);
    
        $bot->reply($menu);
    
        $attachment = new Image(asset('assets/robot.gif'));        
        $message = OutgoingMessage::create('')
                ->withAttachment($attachment);
    
        // Corrigido para enviar a mensagem com anexo
        $bot->reply($message);
    }

    private function handleMeuCurso(BotMan $bot)
    {
        $user = Auth::user();
        if ($user && $user->id_curso) {
            $curso = AdCursos::find($user->id_curso);
            $resposta = $curso ? 'Voc√™ est√° matriculado no curso de ' . $curso->nome_curso . '.' : 'N√£o consegui encontrar informa√ß√µes sobre o seu curso.';
        } else {
            $resposta = 'N√£o consegui encontrar informa√ß√µes sobre o seu curso.';
        }
        $bot->reply($resposta);

        // Corre√ß√£o na cria√ß√£o do anexo de v√≠deo
        $videoUrl = asset('assets/video.mp4'); // Ajuste para a URL correta do v√≠deo
        $attachment = new Video($videoUrl, [
            'custom_payload' => true,
        ]);
        $message = OutgoingMessage::create('Time - UFOB')
                ->withAttachment($attachment);
    
        // Enviar a mensagem com anexo
        $bot->reply($message);
        
        // Continuar com a fun√ß√£o showMainContinuar
        $this->showMainContinuar($bot);
    }

    private function handleInfoACC(BotMan $bot)
    {   $sigga= 'https://sig.ufob.edu.br/sigaa/public/home.jsf';
        $Baremaurl = asset('assets/Barema.pdf'); // Certifique-se de que esta URL √© acess√≠vel e correta

        $user = Auth::user();
        $curso = AdCursos::find($user->id_curso);

        $randomNumber = rand(1, 2);
        $accInfo = "As atividades complementares (ACCs) s√£o importantes para a forma√ß√£o acad√™mica, abrangendo estudos acad√™micos, ci√™ncia, cultura, arte, esporte, extens√£o e experi√™ncias sociais e profissionais. Voc√™ faz parte do PPC $curso->ppc, por tanto √© necess√°rio que registre $curso->carga_horaria_ACC horas de ACC e  $curso->carga_horaria_Extensao horas de Extens√£o. A cada semestre, o curso envia um comunicado para alunos pr√≥ximos √† formatura, pedindo para verificarem suas horas ACC. Os alunos devem preencher um formul√°rio no <a href=\"$sigga\" target=\"_blank\">SIGGA</a> e anexar os certificados. O Barema Oficial do CCET, dispon√≠vel no SIGAA, ajuda a calcular as equival√™ncias das horas ACC. Para mais informa√ß√µes, pe√ßa o <a href=\"$Baremaurl\" target=\"_blank\">Barema Oficial do CCET</a> Valeu!";
        $accInfo1 = "E a√≠!. $user->name . ', Ent√£o, as atividades complementares s√£o aquelas que d√£o um up na nossa forma√ß√£o, abrangendo coisas como estudos acad√™micos, ci√™ncia, cultura, arte, esporte, extens√£o e at√© experi√™ncias sociais e profissionais. Voc√™ faz parte do PPC $curso->ppc, voc√™ precisa de que registre $curso->carga_horaria_ACC horas de ACC e  $curso->carga_horaria_Extensao horas de Extens√£o. A cada semestre, o pessoal do curso lan√ßa um comunicado para a galera que t√° quase se formando, tipo voc√™, pedindo pra dar uma olhada nas horas ACC. A√≠ √© s√≥ preencher um formul√°rio no SIGAA e colar os certificados. Entra l√° no SIGAA e olha os avisos dos semestres passados, porque √© l√° que t√° o tal do <a href=\"$Baremaurl\" target=\"_blank\">Barema Oficial do CCET</a> que ajuda a fazer as contas das equival√™ncias das horas ACC. Valeu!";        
          // Escolhe entre $accInfo e $accInfo1 com base no n√∫mero gerado
          $selectedInfo = ($randomNumber == 1) ? $accInfo : $accInfo1;
          $bot->reply($selectedInfo);
        
        //$bot->reply($accInfo);

        $audioUrl = asset('assets/audio.mp3'); // Ajuste para a URL correta do √°udio
        $attachment = new Audio($audioUrl, [
            'custom_payload' => true,
        ]);

       $message = OutgoingMessage::create('üéµ Ou√ßa mais sobre ACC')
              ->withAttachment($attachment);

        // Enviar a mensagem com anexo de √°udio
        $bot->reply($message);
        
        // Continuar com a fun√ß√£o showMainContinuar
        //$this->showMainContinuar($bot);
    }

    private function showMainMenu(BotMan $bot)
    {
        $menu = Question::create("Como posso ajudar?")
            ->fallback('N√£o foi poss√≠vel fazer a pergunta')
            ->callbackId('main_menu')
            ->addButtons([
               // Button::create('üìö Qual √© o meu curso?')->value('meu_curso'),
                Button::create('‚Ñπ Informa√ß√µes sobre o ACC')->value('info_acc'),
                Button::create('üîÑ Aproveitamento de Estudos')->value('aproveitamento_estudos'),
                Button::create('üìù Matriculas')->value('como_matricula'),
                Button::create('Abrir processo acad√™mico')->value('abrir_processo'),
            ]);

        $bot->reply($menu);
    }

    private function handleACC(BotMan $bot)
    {
        Log::info('ACC keyword detected');
        $question = Question::create('As atividades complementares (ACC) s√£o aquelas que d√£o um up na nossa forma√ß√£o, voc√™ pode seguir estas orienta√ß√µesa')
            ->fallback('N√£o foi poss√≠vel fazer a pergunta')
            ->callbackId('ask_reason')
            ->addButtons([
                Button::create('üìã Como registrar ACC')->value('registrar_acc'),
                Button::create('‚ùì O que s√£o ACC')->value('info_acc'),
                Button::create('Voltar')->value('main_menu'),
            ]);

        $bot->reply($question);
        //Continuar com a fun√ß√£o showMainContinuar
     //   $this->showMainContinuar($bot);
    }

    private function RegistarACC(BotMan $bot)
    {
        $Baremaurl = asset('assets/Barema.pdf'); // Certifique-se de que esta URL √© acess√≠vel e correta
        $sigga= 'https://sig.ufob.edu.br/sigaa/public/home.jsf';
        Log::info('Registar keyword detected');
        $user = Auth::user();
        $randomNumber = rand(1, 2);
        $Registrar_acc = "Respondendo a sua pergunta '. $user->name. 'As atividades complementares (ACCs) podem ser registradas no <a href=\"$sigga\" target=\"_blank\">SIGGA</a> no men√∫ Atividades Aut√¥nomas mas deve seguir o Barema oficial do Centro onde apresentam as equival√™ncias das atividades, veja ele <a href=\"$Baremaurl\" target=\"_blank\">AQUI</a>";  
        $Registrar_acc1 = "E a√≠! '. $user->name . ', Ent√£o, as atividades complementares S√£o registridas na op√ß√£o Atividades Aut√¥nomas de seu menu do <a href=\"$sigga\" target=\"_blank\">SIGGA</a>, entanto s√≥ ser√£o avaliadas pela coordena√ß√£o quando voc√™ integralice todas suas disciplinas . Valeu!";        
          // Escolhe entre $accInfo e $accInfo1 com base no n√∫mero gerado
          $selectedInfo = ($randomNumber == 1) ? $Registrar_acc : $Registrar_acc1;
          $bot->reply($selectedInfo);
          
    }

    private function handleAproveitamento(BotMan $bot)
    {
        Log::info('Aproveitamento de Estudos keyword detected');
        $question = Question::create('O aproveitamento de estudos consiste na dispensa do cumprimento de atividades escolares do curr√≠culo do curso, voc√™ pode seguir estas orienta√ß√µesa ' )
            ->fallback('N√£o foi poss√≠vel fazer a pergunta')
            ->callbackId('ask_reason_aproveitamento')
            ->addButtons([
                Button::create('üìã Como pedir aproveitamento')->value('pedir_aproveitamento'),
                Button::create('‚ùì O que √© aproveitamento de estudos')->value('sobre_aproveitamento'),
            ]);

        $bot->reply($question);
    }

    private function PedirAproveitamento(BotMan $bot)
    { 
        Log::info('Registar keyword detected');
        $user = Auth::user();
        $curso = AdCursos::find($user->id_curso);
        $url = "https://ufob.edu.br/ensino/agenda-academica"; // Substitua pela URL desejada


        $randomNumber = rand(1, 2);
        $Registrar = "Respondendo a sua pergunta '. $user->name. 'Para solicitar o aproveitamento de disciplinas precisa de realizar abertura de um processo acad√™mico √© necess√°rio que toda a documenta√ß√£o comprobat√≥ria necess√°ria para a abertura do processo (requerimentos, hist√≥ricos escolares, ementas, certificados e declara√ß√µes, dentre outros) seja entregue no formato PDF, enviados por meio de formul√°rio para a Secretaria dos Colegiados dos Curso .$curso->nome_curso. escreva 'abrir processo' mais informa√ß√µes";  
        $Registrar1 = "E a√≠! '. $user->name . ', Ent√£o, as atividades complementares S√£o registridas na op√ß√£o Atividades Aut√¥nomas de seu menu do Sigga, entanto s√≥ ser√£o avaliadas pela coordena√ß√£o quando voc√™ integralice todas suas disciplinas . Valeu!";        
        $Registrar2 = "Para solicitar o aproveitamento de estudos tem que abrir um processo e encaminhar para a secretaria do colegiados <a href=\"$url\">colegiados.ccet@ufob.edu.br </a> para seu inicio, escreva 'abrir processo' para te ajudar a abrir o processo acad√™mico.";
                // Escolhe entre $accInfo e $accInfo1 com base no n√∫mero gerado
          $selectedInfo = ($randomNumber == 1) ? $Registrar : $Registrar2; 
          $bot->reply($selectedInfo);
    }

    private function InfoAproveitamento(BotMan $bot)
    {
        $user = Auth::user();
        $randomNumber = rand(1, 2);
        $Info = " Dispensa de disciplinas que pode ser concedida ao estudante j√° cursou previamente o conte√∫do, parcial ou total, da disciplina em outra institui√ß√£o de ensino superior.";
        $Info1 = "E a√≠!. $user->name . ', Cada Processo Acad√™mico apresenta uma demanda espec√≠fica, sendo assim seguir o Manual de Procedimentos ‚Äì Abertura de Processos acad√™micos (link: https://sa.ufob.edu.br/index.php/component/phocadownload/category/9-sae?download=770:manual-de-procedimentos-abertura-de-processos-academicos).  Valeu!";        
          // Escolhe entre $accInfo e $accInfo1 com base no n√∫mero gerado
          $selectedInfo = ($randomNumber == 1) ? $Info : $Info1;
          $bot->reply($selectedInfo);
        $audioUrl = asset('assets/audio.mp3'); // Ajuste para a URL correta do √°udio
        $attachment = new Audio($audioUrl, [
            'custom_payload' => true,
        ]);
       $message = OutgoingMessage::create('üéµ Ou√ßa mais sobre Aproveitamento de Estudos')
              ->withAttachment($attachment);
        // Enviar a mensagem com anexo de √°udio
        $bot->reply($message);
         }

         private function AbrirProcessoAcademico(BotMan $bot)
         {
            $bot->reply("Voc√™ escolheu abrir um processo acad√™mico. Aqui est√£o os passos...");
            $TextUrl = asset('assets/abertura.docx'); // Certifique-se de que esta URL √© acess√≠vel e correta
            $ICPEduUrl = 'https://pessoal.icpedu.rnp.br/home'; // Certifique-se de que esta URL √© acess√≠vel e correta
            $AssinarUrl= 'https://assinador.iti.br'; // Certifique-se de que esta URL √© acess√≠vel e correta
            $SecretariaUrl = 'https://ufob.edu.br/a-ufob/unidades-academicas/ccet/fale-conosco'; // Certifique-se de que esta URL √© acess√≠vel e correta
            $ProtiposUrl = 'https://protic.ufob.edu.br/'; // Certifique-se de que esta URL √© acess√≠vel e correta            
            // Ajuste a cria√ß√£o da mensagem para incluir o link de forma correta
            $messageText = "1Ô∏è‚É£ <strong>Preencha o formul√°rio:</strong><br> Baixe e preencha o formul√°rio necess√°rio <a href=\"$TextUrl\">AQUI </a>";
            $message = OutgoingMessage::create($messageText);
            $sigga= 'https://sig.ufob.edu.br/sigaa/public/home.jsf';
            $sipac= 'https://sig.ufob.edu.br/sipac/?modo=classico';

            // Se voc√™ deseja enviar o arquivo como anexo
            $attachment = new File($TextUrl, ['custom_payload' => true,]);
            $message->withAttachment($attachment);
            
            // Passo 1
            $bot->reply($message);
         
             // Passo 2
             $bot->reply("2Ô∏è‚É£ <strong>Assine o formul√°rio:</strong><br> Assine usando o certificado <a href=\"$ICPEduUrl\" target=\"_blank\">ICPEdu</a>. Siga o manual de instala√ß√£o da <a href=\"$ProtiposUrl\" target=\"_blank\">PROTIC</a>");
         
             // Passo 3
             $bot->reply("3Ô∏è‚É£ <strong>Problemas com ICPEdu?</strong><br>  Use o site GOV.BR para <a href=\"$AssinarUrl\" target=\"_blank\">ASSINAR</a>");
         
             // Passo 4
             $bot->reply("4Ô∏è‚É£ <strong>Envie os documentos</strong><br>  Envie o formul√°rio preenchido e assinado junto com uma c√≥pia do seu RG para: <strong>colegiados.ccet@ufob.edu.br</strong>");         
             // Dica
             $bot->reply("Voc√™ poder√° consultar seu processo na p√°gina <a href=\"$sigga\" target=\"_blank\">SIGGA</a>, atrav√©s do mecanismo de busca, por seu nome ou CPF. Tamb√©m poder√° consult√°-lo logando no <a href=\"$sipac\" target=\"_blank\">SIPAC</a>, com o mesmo usu√°rio e senha do SIGAA, para ver maiores detalhes como documentos anexados e despachos das unidades.");

         
             $this->showMainContinuar($bot);
         }
    private function handleMatricula(BotMan $bot)
    {
        Log::info('Matr√≠cula keyword detected');
        $question = Question::create('O que voc√™ gostaria de saber?')
                ->addButtons([
                Button::create('üìù Como se matricular')->value('como_matricular'),
                Button::create('‚ùì Manual Matr√≠cula online UFOB')->value('duvidas_matricula'),
            ]);

        $bot->reply($question);
    }

    private function ComoMatricular(BotMan $bot)
         {
          //  $bot->reply("Voc√™ escolheu abrir um processo acad√™mico. Aqui est√£o os passos...");
            $TextUrl = asset('assets/abertura.docx'); // Certifique-se de que esta URL √© acess√≠vel e correta
            $ICPEduUrl = 'https://pessoal.icpedu.rnp.br/home'; // Certifique-se de que esta URL √© acess√≠vel e correta
            $AssinarUrl= 'https://assinador.iti.br'; // Certifique-se de que esta URL √© acess√≠vel e correta
            $SecretariaUrl = 'https://ufob.edu.br/a-ufob/unidades-academicas/ccet/fale-conosco'; // Certifique-se de que esta URL √© acess√≠vel e correta
            $ProtiposUrl = 'https://protic.ufob.edu.br/'; // Certifique-se de que esta URL √© acess√≠vel e correta            
            // Ajuste a cria√ß√£o da mensagem para incluir o link de forma correta
            //$messageText = "1Ô∏è‚É£ <strong>Preencha o formul√°rio:</strong><br> Baixe e preencha o formul√°rio necess√°rio <a href=\"$TextUrl\">AQUI </a>";
//$message = OutgoingMessage::create($messageText);
            $sipac= 'https://sig.ufob.edu.br/sipac/?modo=classico';

            // Se voc√™ deseja enviar o arquivo como anexo
            //$attachment = new File($TextUrl, ['custom_payload' => true,]);
          //  $message->withAttachment($attachment);
            
            // Passo 1
           // $bot->reply($message);
         
             // Passo 2
             $bot->reply("1Ô∏è‚É£ A matr√≠cula web dos estudantes veteranos da UFOB dever√° ser realizada via Portal do Estudante do Sistema Integrado de Atividades Acad√™micas (SIGAA).");

    $SIGAAUrl = 'https://sig.ufob.edu.br/sigaa/public/home.jsf'; // URL do SIGAA
    $CalendarioAcademicoUrl = 'https://ufob.edu.br/ensino/agenda-academica'; // URL do Calend√°rio Acad√™mico

    // Instru√ß√µes para a matr√≠cula
    $messageText = "2Ô∏è‚É£Para realizar a matr√≠cula, √© preciso acessar o <a href=\"$SIGAAUrl\" target=\"_blank\">site</a> e solicitar a inscri√ß√£o em turmas. Os prazos das matr√≠culas podem ser verificados no <a href=\"$CalendarioAcademicoUrl\" target=\"_blank\">Calend√°rio Acad√™mico</a>.";
    $message = OutgoingMessage::create($messageText);

    // Passo 1 - Acesso ao SIGAA e solicita√ß√£o de inscri√ß√£o em turmas
    $bot->reply($message);

    // Passo 2 - Verifica√ß√£o dos prazos no Calend√°rio Acad√™mico
    $bot->reply("3Ô∏è‚É£O resultado com a confirma√ß√£o da matr√≠cula nas disciplinas ser√° publicado na p√°gina do estudante no Sistema. Entre os dias de ajustes de matr√≠cula, a lista final com os componentes curriculares em que o estudante est√° inscrito ser√° divulgada.");

    // Informa√ß√µes adicionais
    $bot->reply("4Ô∏è‚É£ As matriculas de disciplinas ser√° avalida por seu orientador academico, entanto o deferimento ser√° dado pela coordena√ß√£o de ensino, quem dar√° prioridades aos alunos do curso da disciplina em caso das disciplinas optativas. Verifique os prazos das matr√≠culas no <a href=\"$CalendarioAcademicoUrl\" target=\"_blank\">Calend√°rio Acad√™mico</a>.");

    $this->showMainContinuar($bot);
         }

         
         private function ManualMatricular(BotMan $bot)
         {
          //  $bot->reply("Voc√™ escolheu abrir um processo acad√™mico. Aqui est√£o os passos...");
            $TextUrl = asset('assets/ManualSiSU.pdf'); // Certifique-se de que esta URL √© acess√≠vel e correta
            $messageText = "1Ô∏è‚É£ <strong>Parab√©ns pela sua aprova√ß√£o!</strong><br>  Para efetivar sua matr√≠cula na UFOB ser√° necess√°rio que voc√™ preencha o formul√°rio eletr√¥nico, no nosso Portal do Ingresso,
seguindo o passo-a-passo descrito abaixo. <a href=\"$TextUrl\">AQUI </a>";
            $message = OutgoingMessage::create($messageText);
            // Se voc√™ deseja enviar o arquivo como anexo
            $attachment = new File($TextUrl, ['custom_payload' => true,]);
            $message->withAttachment($attachment);
            
            // Passo 1
            $bot->reply($message);
         }

    private function sayGoodbye(BotMan $bot)
    {
        $bot->reply('At√© mais! Se precisar de algo, estou por aqui.');
    }

    

    private function showMainContinuar(BotMan $bot)
    {
        $question = Question::create('Posso ajudar com mais alguma coisa?')
            ->fallback('N√£o foi poss√≠vel fazer a pergunta')
            ->callbackId('continuar_menu')
            ->addButtons([
                Button::create('SIM')->value('main_menu'),
                Button::create('N√ÉO')->value('adeus'),
            ]);

        $bot->reply($question);
    }
}
